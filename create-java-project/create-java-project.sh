#!/bin/bash

# Check if a full path to the project directory was provided
if [ -z "$1" ]; then
    echo "Usage: $0 <full-path-to-project-directory>"
    exit 1
fi

PROJECT_PATH=$1
PROJECT_NAME=$(basename "$PROJECT_PATH")

# Create the project directory if it doesn't exist
mkdir -p $PROJECT_PATH

# Create the .vscode directory structure
mkdir -p $PROJECT_PATH/.vscode

# Create the .vscode/launch.json file
cat <<EOL > $PROJECT_PATH/.vscode/launch.json
{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "java",
            "name": "Launch Main",
            "request": "launch",
            "mainClass": "Main",
            "console": "integratedTerminal"
        }
    ]
}
EOL

# Create the .vscode/tasks.json file
cat <<EOL > $PROJECT_PATH/.vscode/tasks.json
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "build",
            "type": "shell",
            "command": "mvn",
            "args": [
                "clean",
                "package"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": [
                "\$javac"
            ],
            "detail": "Generated by Java Extension Pack"
        }
    ]
}
EOL

# Check if Main.java exists in the root directory
if [ ! -f $PROJECT_PATH/Main.java ]; then
    # Create a sample Main.java file in the root directory
    cat <<EOL > $PROJECT_PATH/Main.java
public class Main {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
EOL
fi

# Create a README.md file in the root directory
cat <<EOL > $PROJECT_PATH/README.md
# Java Project Template

This is a template for Java projects in Visual Studio Code.

## Setup

- Place your Java files in the project root directory.
- Use the build task (\`Cmd+Shift+B\` or \`Ctrl+Shift+B\`) to compile.
- Use the launch configuration (\`F5\`) to run your application.
EOL

# Create a .gitignore file in the root directory
cat <<EOL > $PROJECT_PATH/.gitignore
# Compiled class files
*.class

# Log files
*.log

# BlueJ files
*.ctxt

# Package Files #
*.jar
*.war
*.ear

# IDE directories
.idea/
*.iws
*.iml
*.ipr
out/

# Eclipse
.metadata/
*.log
tmp/
.settings/
.loadpath

# NetBeans
nbproject/private/
build/
nbbuild/
dist/
nbdist/
.nb-gradle/

# Maven
target/
EOL

# Create a pom.xml file for Maven
cat <<EOL > $PROJECT_PATH/pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>$PROJECT_NAME</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <dependencies>
        <!-- Add your dependencies here -->
        <!-- Example for JavaFX -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>15.0.1</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
EOL

echo "Java project '$PROJECT_PATH' created successfully."
